{"version":3,"sources":["components/editor.jsx","store/actions/temperatureAction.js","store/actions/windToggleAction.js","store/actions/titleAction.js","components/temperature.jsx","components/widget.jsx","utils.js","App.js","serviceWorker.js","store/reducers/temperatureReducer.js","store/reducers/titleReducer.js","store/reducers/windToggleReducer.js","store/reducers/index.js","index.js"],"names":["Editor","dispatch","useDispatch","setTemperatureHandler","e","type","target","value","setWindHandler","payload","className","htmlFor","onChange","id","name","placeholder","onClick","defaultChecked","Temperature","celsiusDegree","temperature","useSelector","state","toFixed","initialState","degree","city","windSpeed","windDirection","weatherImageIcon","widgetReducer","action","deg","windDeg","parseInt","Widget","useReducer","title","wind","useEffect","navigator","geolocation","getCurrentPosition","position","a","fetch","coords","latitude","longitude","method","headers","rawResponse","json","result","main","temp","speed","weather","icon","src","alt","width","height","App","Boolean","window","location","hostname","match","temperatureReducer","titleReducer","windToggleReducer","combineReducers","devTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","allReducers","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e6329c82.chunk.js","sourcesContent":["import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { selectTemperature } from '../store/actions/temperatureAction'\nimport { writeTitle } from '../store/actions/titleAction'\nimport { turnOff, turnOn } from '../store/actions/windToggleAction'\n\nconst Editor = () => {\n  const dispatch = useDispatch()\n\n  const setTitleHandler = e => {\n    dispatch(writeTitle(e.target.value))\n  }\n\n  const setTemperatureHandler = e => {\n    dispatch(selectTemperature(e.target.value))\n  }\n\n  const setWindHandler = e => {\n    if (e.target.value === 'on') {\n      dispatch(turnOn())\n    } else if (e.target.value === 'off') {\n      dispatch(turnOff())\n    }\n  }\n\n  return (\n    <>\n      <form className=\"side\" >\n        <div>\n          <label className=\"lable-line\" htmlFor=\"title\">Title</label>\n          <input className=\"input-text\" onChange={setTitleHandler} type=\"text\" id=\"title\" name=\"title\" placeholder=\"Title of Widget\" />\n        </div>\n\n        <div>\n          <p>Temperature</p>\n          <input onClick={setTemperatureHandler} type=\"radio\" id=\"celsius\" name=\"temp\" value=\"celsius\" defaultChecked />\n          <label htmlFor=\"celsius\">&#8451;</label>\n          <input className=\"padme\" onClick={setTemperatureHandler} type=\"radio\" id=\"fahrenheit\" name=\"temp\" value=\"fahrenheit\" />\n          <label htmlFor=\"fahrenheit\">&#8457;</label>\n        </div>\n\n        <div>\n          <p>Wind</p>\n          <input onClick={setWindHandler} type=\"radio\" id=\"on\" name=\"wind\" value=\"on\" defaultChecked />\n          <label htmlFor=\"on\">On</label>\n          <input className=\"padme\" onClick={setWindHandler} type=\"radio\" id=\"off\" name=\"wind\" value=\"off\" />\n          <label htmlFor=\"off\">Off</label>\n        </div>\n      </form>\n    </>\n  )\n}\n\nexport default Editor","export const selectTemperature = (metric) => ({type: metric})","export const turnOn = () => {\n  return {\n    type: 'windOn',\n    payload: true\n  }\n}\n\nexport const turnOff = () => {\n  return {\n    type: 'windOff',\n    payload: false\n  }\n}","export const writeTitle = (name) => ({\n  type: 'title',\n  payload: name\n})","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nconst Temperature = ({celsiusDegree}) => {\n  const temperature = useSelector(state => state.temperature)\n  return (\n    <p className=\"big-temp\">{temperature ? celsiusDegree.toFixed(0) : (celsiusDegree * 9 / 5 + 32).toFixed(0)}&#176;</p>\n  )\n}\n\nexport default Temperature","import React, { useEffect, useReducer } from 'react'\nimport { useSelector } from 'react-redux'\nimport Temperature from './temperature'\nimport { degToCard } from '../utils'\n\nconst initialState = {\n  degree: 0,\n  city: 'Sydney',\n  windSpeed: 0,\n  windDirection: 'N',\n  weatherImageIcon: '',\n}\n\nconst widgetReducer = (state, action) => {\n  if (action.type === 'updateWeather') {\n    return {\n      degree: action.payload.degree - 273.15, // from Kelvins to Celsius\n      city: action.payload.city,\n      windSpeed: (action.payload.windSpeed * 1.609).toFixed(0), // from mile/h to km/h\n      windDirection: degToCard(action.payload.windDeg), // from wind degree to wind direction\n      weatherImageIcon: action.payload.weatherImageIcon,\n    }\n  }\n  return state\n}\n\nconst Widget = () => {\n  const [state, dispatch] = useReducer(widgetReducer, initialState)\n  const title = useSelector(state => state.title)\n  const wind = useSelector(state => state.wind)\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async position => {\n        const rawResponse = await fetch(\n          `https://api.openweathermap.org/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&appid=9d17ef1b2ff64e1404e9ebca2d6a0018`,\n          {\n            method: 'GET',\n            headers: {\n              'Accept': 'application/json',\n            },\n          })\n        const result = await rawResponse.json()\n        \n        dispatch({type: 'updateWeather', payload: {  \n          degree: result.main.temp,\n          city: result.name,\n          windSpeed: result.wind.speed,\n          windDeg: result.wind.deg,\n          weatherImageIcon: result.weather[0].icon,}})\n      })\n    }\n  }, [])\n\n  return (\n    <div className=\"side\">\n      <div className=\"shadow\">\n        <header>\n          <h2 className=\"title\">{title || 'Title of Widget'}</h2>\n        </header>\n        <div className=\"weather-content\">\n          <img src={`http://openweathermap.org/img/wn/${state.weatherImageIcon}@4x.png`} alt=\"Loading\" width=\"120\" height=\"112\" />\n          <div className=\"weather-info\">\n            <p className=\"city\">{state.city}</p>\n            <Temperature celsiusDegree={state.degree} />\n            {wind && <p className=\"wind\"><strong>Wind</strong> {state.windDirection} {state.windSpeed}km/h</p>}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Widget\n","export const degToCard = deg => {\n  const cardinalPoints = ['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N']\n  const shitfPoint = 11.25\n  const range = 22.5\n\n  if (deg < shitfPoint) {\n    return 'N'\n  }\n  return cardinalPoints[(parseInt((deg - shitfPoint)/range))]\n}","import React from 'react'\nimport Editor from './components/editor'\nimport Widget from './components/widget'\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <div className=\"Wether-Container\">\n        <Editor />\n        <div className=\"vl\"></div>\n        <Widget />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const temperatureReducer = (state = true, action) => {\n  switch (action.type) {\n    case 'celsius':\n      return true\n    case 'fahrenheit':\n      return false\n    default:\n      return state\n  }\n}\n\nexport default temperatureReducer\n","const titleReducer = (state = 'Title of Widget', action) => {\n  switch (action.type) {\n    case 'title':\n      return action.payload || 'Title of Widget'\n    default:\n      return state\n  }\n}\n\nexport default titleReducer","const windToggleReducer = (state = true, action) => {\n  switch (action.type) {\n    case 'windOn':\n      return action.payload\n    case 'windOff':\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport default windToggleReducer","import { combineReducers } from 'redux'\nimport temperatureReducer from './temperatureReducer'\nimport titleReducer from './titleReducer'\nimport windToggleReducer from './windToggleReducer'\n\nexport default combineReducers({\n  temperature: temperatureReducer,\n  title: titleReducer,\n  wind: windToggleReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux';\nimport allReducers from './store/reducers';\n\nconst devTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n\nconst store = createStore(allReducers, devTools)\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}